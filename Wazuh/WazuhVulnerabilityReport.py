
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from base64 import b64encode
import xlsxwriter
import requests
import getpass
import urllib3
import time
import sys

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def TimeStamp():
    var         = time.ctime()
    sans_colons = var.replace(":","_")
    sans_spaces = sans_colons.replace(" ","_")
    timestamp   = sans_spaces
    return timestamp

def GenFileName():
    file_name = "Wazuh_Vuln_Report"
    timestamp = TimeStamp()
    file_name += timestamp
    file_name += ".xlsx"
    return file_name

def GetAuthToken(url,headers):
    req = requests.get(headers=headers,url=url,timeout=15,verify=False)
    if(req.status_code == 200):
        content = req.json()
        key = content['data']['token']
        return key
    else:
        print("[!] Failed to retrieve the JWT")
        sys.exit()
    
def GetAgents(url,key):
    print("[~] Retrieving agent data...")
    headers = {
                "Authorization": "Bearer {0}".format(key)
              }
    req     = requests.get(headers=headers,url=url,timeout=15,verify=False)
    if(req.status_code == 200):
        content = req.json()
        content = content['data']
        content = content['affected_items']
        agents  = []
        for item in content:
            for element in item.keys():
                id   = item['id']
                name = item['name']
                ip   = item['ip']
            print("[*] Located: {0}:{1}:{2}".format(id,name,ip))
            agents.append([id,name,ip])
        return agents
    else:
        print("[!] Failed to retrieve agent data")
        sys.exit()

def GetVulns(agents,mgr_ip,key):
    print("[~] Retrieving vulnerability data...")
    headers = {
                "Authorization": "Bearer {0}".format(key)
              }
    agent_vulns = {}
    for agent in agents:
        id    = agent[0]
        name  = agent[1]
        ip    = agent[2]
        print("[~] Fetching vulnerabilities for: {0}:{1}".format(id,name))
        vuln_url  = "https://{0}:55000/vulnerability/{1}".format(mgr_ip,id)
        req       = requests.get(headers=headers,url=vuln_url,timeout=30,verify=False)
        if(req.status_code == 200):
            content  = req.json()
            agent_id = name+":({0})".format(ip)
            agent_vulns[agent_id] = content 
        else:
            pass
    return agent_vulns

def IdentifyUniqueVulns(vulns):
    print("[~] Identifying unique vulnerabilities...")
    unique_vulns = []
    unique_vulns.append('Agent')
    for entry in vulns.keys():
        agent_vulns = vulns[entry]
        agent_vulns = agent_vulns['data']
        agent_vulns = agent_vulns['affected_items']
        for entry in agent_vulns:
            for item in entry.keys():
                current_cve = entry['cve']
                if(current_cve not in unique_vulns):
                    unique_vulns.append(current_cve)
    return unique_vulns

def IdentifyUniquePackages(vulns):
    print("[~] Identifying unique packages...")
    unique_pkgs = []
    unique_pkgs.append('Agent')
    for entry in vulns.keys():
        agent_vulns = vulns[entry]
        agent_vulns = agent_vulns['data']
        agent_vulns = agent_vulns['affected_items']
        for entry in agent_vulns:
            for item in entry.keys():
                current_pkg = entry['name']
                if(current_pkg not in unique_pkgs):
                    unique_pkgs.append(current_pkg)
    return unique_pkgs

def ParseAndPresentVulns(vulns):
    print("[~] Parsing vulnerability data...")
    time.sleep(1)
    fileName          = GenFileName()
    workbook          = xlsxwriter.Workbook(fileName)
    header_format     = workbook.add_format({'bold': True})
    header_format.set_center_across()
    vuln_format       = workbook.add_format({'bold': True, 'bg_color': 'red'})
    vuln_format.set_center_across()
    current_worksheet = workbook.add_worksheet('CVEs Per Agent')
    chars        = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
    unique_vulns = IdentifyUniqueVulns(vulns)
    unique_pkgs  = IdentifyUniquePackages(vulns)
    limit        = len(unique_vulns)
    current_iter      = 0
    alpha_iter        = 0
    col_index         = 1
    secondary_index   = 0
    col_hdr_index     = 0
    while(current_iter < limit-1):
        char_index = 0
        if(current_iter == limit):
            break
        while(alpha_iter <= 25):
            if(current_iter == limit):
                break
            if(current_iter >= 25):
                write_index = chars[secondary_index]+chars[alpha_iter]+str(col_index)
                current_worksheet.write(write_index,unique_vulns[col_hdr_index],header_format)
            if(current_iter <= 25):
                write_index = chars[char_index]+str(col_index)
                current_worksheet.write(write_index,unique_vulns[col_hdr_index],header_format)
            current_iter += 1 ; char_index += 1 ; alpha_iter += 1 ; col_hdr_index += 1
        if(current_iter > 50):
            secondary_index += 1
        char_index = 0
        alpha_iter = 0
    row_index = 2 
    for agent in vulns.keys():
        print("[~] Processing vulnerabilities for: %s " % agent)
        agent_vulns = vulns[agent]
        agent_vulns = agent_vulns['data']
        agent_vulns = agent_vulns['affected_items']
        if(agent_vulns):
            unique_agent_vulns = []
            for entry in agent_vulns:
                for element in entry.keys():
                    current_vuln     = entry['cve']
                    current_severity = entry['severity']
                    current_status   = entry['status']
                    if(current_vuln not in unique_agent_vulns):
                        unique_agent_vulns.append(current_vuln)
            vuln_index = []
            vuln_index.append(agent)
            for vuln in range(1,len(unique_vulns)):
                if(unique_vulns[vuln] in unique_agent_vulns):
                    vuln_index.append('X')
                else:
                    vuln_index.append('')
            current_iter      = 0
            alpha_iter        = 0
            secondary_index   = 0
            while(current_iter < limit-1):
                char_index = 0
                if(current_iter == limit):
                    break
                while(alpha_iter <= 25):
                    if(current_iter == limit):
                        break
                    if(current_iter >= 25):
                        write_index = chars[secondary_index]+chars[alpha_iter]+str(row_index)
                        write_value = str(vuln_index[current_iter])
                        if(write_value == 'X'):
                            current_worksheet.write(write_index,write_value,vuln_format)
                        else:
                            current_worksheet.write(write_index,write_value)
                    if(current_iter <= 25):
                        write_index = chars[alpha_iter]+str(row_index)
                        write_value = str(vuln_index[current_iter])
                        if(write_value == 'X'):
                            current_worksheet.write(write_index,write_value,vuln_format)
                        else:
                            current_worksheet.write(write_index,write_value)
                    current_iter += 1 ; char_index += 1 ; alpha_iter += 1
                if(current_iter > 50):
                    secondary_index += 1
                char_index = 0
                alpha_iter = 0
            current_iter  = 0
            row_index += 1
        else:
            print("[*] No vulnerabilities identified for: %s " % agent)
            write_index = 'A'+str(row_index)
            current_worksheet.write(write_index,agent)
            row_index += 1
    current_worksheet = workbook.add_worksheet('Vulnerable Software')
    limit             = len(unique_pkgs)
    current_iter      = 0
    alpha_iter        = 0
    col_index         = 1
    secondary_index   = 0
    col_hdr_index     = 0
    while(current_iter < limit-1):
        char_index = 0
        if(current_iter == limit):
            break
        while(alpha_iter <= 25):
            if(current_iter == limit):
                break
            if(current_iter >= 25):
                write_index = chars[secondary_index]+chars[alpha_iter]+str(col_index)
                current_worksheet.write(write_index,unique_pkgs[col_hdr_index],header_format)
            if(current_iter <= 25):
                write_index = chars[char_index]+str(col_index)
                current_worksheet.write(write_index,unique_pkgs[col_hdr_index],header_format)
            current_iter += 1 ; char_index += 1 ; alpha_iter += 1 ; col_hdr_index += 1
        if(current_iter > 50):
            secondary_index += 1
        char_index = 0
        alpha_iter = 0
    row_index = 2 
    for agent in vulns.keys():
        print("[~] Processing packages for: %s " % agent)
        agent_vulns = vulns[agent]
        agent_vulns = agent_vulns['data']
        agent_vulns = agent_vulns['affected_items']
        if(agent_vulns):
            unique_agent_pkgs = []
            for entry in agent_vulns:
                for element in entry.keys():
                    current_pkg      = entry['name'] 
                    current_severity = entry['severity']
                    current_status   = entry['status']
                    if(current_pkg not in unique_agent_pkgs):
                        unique_agent_pkgs.append(current_pkg)
            pkg_index = []
            pkg_index.append(agent)
            for vuln in range(1,len(unique_pkgs)):
                if(unique_pkgs[vuln] in unique_agent_pkgs):
                    pkg_index.append('X')
                else:
                    pkg_index.append('')
            current_iter      = 0
            alpha_iter        = 0
            secondary_index   = 0
            while(current_iter < limit-1):
                char_index = 0
                if(current_iter == limit):
                    break
                while(alpha_iter <= 25):
                    if(current_iter == limit):
                        break
                    if(current_iter >= 25):
                        write_index = chars[secondary_index]+chars[alpha_iter]+str(row_index)
                        write_value = str(pkg_index[current_iter])
                        if(write_value == 'X'):
                            current_worksheet.write(write_index,write_value,vuln_format)
                        else:
                            current_worksheet.write(write_index,write_value)
                    if(current_iter <= 25):
                        write_index = chars[alpha_iter]+str(row_index)
                        write_value = str(pkg_index[current_iter])
                        if(write_value == 'X'):
                            current_worksheet.write(write_index,write_value,vuln_format)
                        else:
                            current_worksheet.write(write_index,write_value)
                    current_iter += 1 ; char_index += 1 ; alpha_iter += 1
                if(current_iter > 50):
                    secondary_index += 1
                char_index = 0
                alpha_iter = 0
            current_iter  = 0
            row_index += 1
        else:
            print("[*] No vulnerable packages identified for: %s " % agent)
            write_index = 'A'+str(row_index)
            current_worksheet.write(write_index,agent)
            row_index += 1
    workbook.close()
    print("[*] Vulnerability report may be located within: %s " % fileName)

def main():
    print("[*] Wazuh API Vulnerability Report script")
    print("=========================================")
    username  = input("[+] Enter the Wazuh API account username-> ")
    password  = getpass.getpass("[+] Enter the Wazuh API account password-> ")
    ip        = input("[+] Enter the Wazuh Manager's IP address-> ")
    creds     = f"{username}:{password}".encode()
    headers   = {'Authorization': f'Basic {b64encode(creds).decode()}'} 
    auth_url  = "https://{0}:55000/security/user/authenticate".format(ip)
    agent_url = "https://{0}:55000/agents".format(ip)
    key       = GetAuthToken(auth_url,headers)
    agents    = GetAgents(agent_url,key)
    vulns     = GetVulns(agents,ip,key)
    ParseAndPresentVulns(vulns)

if(__name__ == '__main__'):
    main()